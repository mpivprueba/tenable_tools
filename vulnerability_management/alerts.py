"""
alerts.py

Provides alerting functionality for Tenable.io scans.
Checks for critical vulnerabilities in one or more scans and sends an email alert.
"""
from api_utils import get_headers
from config import (BASE_URL, EMAIL_FROM, EMAIL_TO, EMAIL_SERVER, EMAIL_PORT, EMAIL_USER, EMAIL_PASS)
import requests
import smtplib
from email.mime.text import MIMEText
import json


class Alerts:
    @staticmethod
    def critical_vulns(*scan_ids):
        """
        Checks provided scan IDs for critical vulnerabilities and sends an email if any are found.

        Args:
            *scan_ids: One or more scan IDs to check.

        Returns:
            None. Prints results and sends email if vulnerabilities are found.
        """
        if not scan_ids:
            print("No scan IDs provided.")
            return

        found = []

        for scan_id in scan_ids:
            url = f"{BASE_URL}/scans/{scan_id}"
            try:
                response = requests.get(url, headers=get_headers(), timeout=30)
            except requests.RequestException as e:
                print(f"Error connecting to Tenable.io for scan {scan_id}: {e}")
                continue

            if response.status_code == 200:
                try:
                    scan_data = response.json()
                    # Check different possible response structures
                    vulnerabilities = scan_data.get("vulnerabilities", [])
                    
                    # If no vulnerabilities at top level, check other structures
                    if not vulnerabilities and 'results' in scan_data:
                        vulnerabilities = scan_data['results'].get('vulnerabilities', [])
                    
                    for vuln in vulnerabilities:
                        # Tenable uses severity as integer: 0=Info, 1=Low, 2=Medium, 3=High, 4=Critical
                        if vuln.get("severity") == 4:
                            plugin_name = vuln.get("plugin_name", "No name")
                            plugin_id = vuln.get("plugin_id", "N/A")
                            found.append((scan_id, plugin_name, plugin_id))
                            
                except (json.JSONDecodeError, KeyError) as e:
                    print(f"Error parsing response for scan {scan_id}: {e}")
                    continue
                    
            elif response.status_code == 401:
                print(f"Authentication failed for scan {scan_id}. Check your API keys.")
                continue
            elif response.status_code == 403:
                print(f"Permission denied for scan {scan_id}.")
                continue
            elif response.status_code == 404:
                print(f"Scan {scan_id} not found.")
                continue
            else:
                print(f"Error retrieving scan {scan_id}. Code: {response.status_code}, Response: {response.text[:200]}")
                continue

        # Debug: Show what vulnerabilities were found
        print(f"Found {len(found)} critical vulnerabilities")
        for scan_id, name, pid in found:
            print(f"- Scan {scan_id}: {name} (ID: {pid})")

        if found:
            body = "CRITICAL VULNERABILITIES FOUND:\n\n"
            body += "\n".join([f"Scan ID: {sid} - Plugin: {name} (ID: {pid})" 
                             for sid, name, pid in found])
            body += f"\n\nTotal critical vulnerabilities found: {len(found)}"
            
            msg = MIMEText(body, "plain", "utf-8")
            msg["Subject"] = "Critical Vulnerability Alert"
            msg["From"] = EMAIL_FROM
            msg["To"] = EMAIL_TO

            # Debug SMTP connection
            print(f"Attempting SMTP connection to: {EMAIL_SERVER}:{EMAIL_PORT}")
            print(f"Using email account: {EMAIL_USER}")

            try:
                # First try TLS (port 587) - Office365 prefers this
                print("Trying TLS connection...")
                server = smtplib.SMTP(EMAIL_SERVER, 587, timeout=30)
                server.ehlo()
                server.starttls()
                server.ehlo()
                
                if EMAIL_USER and EMAIL_PASS:
                    server.login(EMAIL_USER, EMAIL_PASS)
                
                server.sendmail(EMAIL_FROM, EMAIL_TO.split(','), msg.as_string())
                server.quit()
                print("Email sent successfully using TLS")
                
            except smtplib.SMTPAuthenticationError:
                print("TLS: SMTP Authentication failed. Check email credentials.")
            except smtplib.SMTPException as e:
                print(f"TLS SMTP error: {e}")
                # If TLS fails, try SSL as fallback
                try:
                    print("Trying SSL connection as fallback...")
                    server = smtplib.SMTP_SSL(EMAIL_SERVER, 465, timeout=30)
                    server.ehlo()
                    
                    if EMAIL_USER and EMAIL_PASS:
                        server.login(EMAIL_USER, EMAIL_PASS)
                    
                    server.sendmail(EMAIL_FROM, EMAIL_TO.split(','), msg.as_string())
                    server.quit()
                    print("Email sent successfully using SSL")
                    
                except smtplib.SMTPAuthenticationError:
                    print("SSL: SMTP Authentication failed. Check email credentials.")
                except smtplib.SMTPException as e:
                    print(f"SSL SMTP error: {e}")
                except Exception as e:
                    print(f"SSL failed: {e}")
                    
            except Exception as e:
                print(f"TLS failed: {e}")
        else:
            print("No critical vulnerabilities found in any scans.")